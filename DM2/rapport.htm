<!DOCTYPE html>
<html lang="en-us">
<head>
	<meta charset="UTF-8">
	<title>IFT3911 - Devoir 2</title>
	<meta name="viewport" content="width=device-width, initial-scale=1">
	<link rel="stylesheet" type="text/css" href="./style.css" media="screen">
</head>
<body>

	<h1>IFT3911 - Devoir 1</h1>
	<nav>
		<ul>
			<li><a href="#top">Haut de page</a></li>
			<li><a href="#diag">Design logiciel</a></li>
			<li><a href="#qual">Qualité du design</a></li>
		</ul>
	</nav>

	<main>

		<div>
			<h2 id="top">Informations générales</h2>
			<div class="student">
				 <dl>
					<dt>Nom:</dt>
					<dd>Félix Bélanger-Robillard</dd>
					<dt>Matricule:</dt>
					<dd>3159</dd>
					<dt>Courriel: </dt>
					<dd>felix.belanger-robillard@umontreal.ca</dd>
					<dt>Temps mis:</dt>
					<dd>14 heures</dd>
				</dl>
			</div>
			<div class="student">
				 <dl>
					<dt>Nom:</dt>
					<dd>Gevrai Jodoin-Tremblay</dd>
					<dt>Matricule:</dt>
					<dd>9650</dd>
					<dt>Courriel:</dt>
					<dd>gevrai.jodoin-tremblay@umontreal.ca</dd>
					<dt>Temps mis:</dt>
					<dd>~15 heures</dd>
				</dl>
			</div>
		</div>

		<div>
			<h2>Distribution des tâches</h2>

			<table cellpadding="7px">
				<thead>
					<tr>
						<th class="first_col">
							Tâche
						</th>
						<th>
							Félix
						</th>
						<th>
							Gevrai
						</th>
					</tr>
				</thead>
				<tbody>
					<tr>
						<td class="first_col">
							Design
						</td>
						<td>
							Modifications en fonction de l'analyse et des principes, Diagramme de paquets
						</td>
						<td>
							Diagramme logiciel, Diagrammes de séquence, Contraintes OCL
						</td>
					</tr>
					<tr>
						<td class="first_col">
							Qualité
						</td>
						<td>
							Discussions, graphes
						</td>
						<td>
							
						</td>
					</tr>
					<tr>
					<td>Autres</td>
					
					<td>Mise en page du rapport</td>
					
					<td></td>
					</tr>
				</tbody>
			</table>

		</div>
		<h2>Hypothèses</h2>
		<p>Nous avons présumé qu'il était nécessaire de stocker l'information, nous avons un paquet qui n'a d'autre but que de gérer une base de données, offrant une interface pour définir les éléments qu'elle poeut gérer.</p>
		<p>Le fichier visual paradigm se trouve <a href="./Design/design.vpp">ici</a> et contient l'ensemble des diagrammes demandés pour le devoir.</p>
		<h2 id="diag">Diagramme de classes</h2>
		<img src="./Design/diagramme_conceptuel.png" alt="diagramme logiciel de classe"/>
		<h2>Diagrammes de séquence</h2>
        <h3>Annulation d'une réservation</h3>
		<img src="./Design/ClientSession_cancelReservation.png" alt="diagramme séquence cancel reservation"/>
        <h3>Modification d'une réservation</h3>
		<img src="./Design/ClientSession_modifyReservation.png" alt="diagramme séquence modifier réservation"/>
        <h3>Payer une réservation</h3>
		<img src="./Design/ClientSession_payReservation.png" alt="diagramme séquence payer réservation"/>
        <h3>Effectuer une réservation pour une place</h3>
		<img src="./Design/ClientSession_reserveSeatOrCabin.png" alt="diagramme séquence réserver"/>
        <h3>Vérification des voyages disponibles</h3>
		<img src="./Design/ClientSession_verifyTrips.png" alt="diagramme séquence regarder voyages"/>
		<h2>Diagramme de paquets</h2>
        Ce diagramme montre les dépendances entre les paquets de notre design. Se référer au diagramme de classes pour plus de détails sur les classes à l'intérieur de ceux-ci.
		<img src="./Design/Package diagram.png" alt="diagramme de paquets"/>
		<h2>Contraintes OCL</h2>
        <ul>
			<li> Le port de départ et d'arrivée d'une croisière doivent être les mêmes
        <pre>context Cruise inv: self.stops->first().location = self.stops->last().location</pre>
			</li>

			<li> Un paquebot peut être affecté à plusieurs itinéraire tant qu'ils ne se chevauchent pas 
		<pre>context Cruise
inv:
    let otherCruisesForThisVehicle = Cruise.allInstances->forAll(c | self.vehicle = c.vehicle)->excluding(self)
    otherCruisesForThisVehicle->forAll(c | c.getArrivalTime < self.getDepartureTime or c.getDepartureTime > self.getArrivalTime)
        </pre>
			</li>	
			<li> Réserver ne peut se faire que pour un siège libre. Identifiez la postcondition de l'opération réserver().
		<pre>context Reservation::Reservation(r : ReservableForTrip, c : client)
pre: 
    r.isAvailable
post:
    !r.isAvailable and self.client = c and self.reservableForTrip = r
    
		</pre>
			</li>
		</ul>
		<h2>Identification des modules réutilisables</h2>

		<p>
		Les modules réutilisables sont les paquets Travel et Reservation. Ces classes font parties du domaine métier du voyage pour Travel et Reservation et Payment est réutilisable pour la plupart des commerces. Ce sont des modules réutilisables pour ce domaine de métier. Le paquet PersistantStorage pourrait également être réutilisable et relève plutôt du domaine d'architecture puisqu'il correspond à une architecture 3-tiers avec. Les autres paquets relèvent plutôt du domaine d'application. Quand on regarde la paquet de UserSessions et Utils, on voit qu'ils sont très spécifiques au fonctionnement précis de cette application. 
		</p>
		
		<h2 id="qual">Discussion sur la cohérence et couplage</h2>

		<p>
		
		Étant donné que le système est généralisé afin d'accomoder d'autres moyens de transport, il a fallu complètement revoir la façon que nous avions interprété les relations entre L'aéroport, le vol et l'avion. Procédé par héritage semblait allé de soi pour généralisé ces concepts. Nous avons donc le voyage (class Trip), le véhicule (class TransportVehicule) et le lieu (class TravelFacility) dont hérite les types spéficiques. À ce niveau, on a minimisé le couplage entre ces abstractions. De fait, elles font partie de paquet différents qui sont seulement reliés dans la mesure qu'un voyage s'effectue avec un véhicule à partir d'un lieu. Le tout fait partie d'un super-paquet Travel qui englobe tout ce qui relève de ces classes. On y trouve donc également la composition des véhicules et de leurs sections. Puisque que ce qui est réservable est assez différent l'un de l'autre, nous avons décidé de passer par une interface pour ce qui est de ce que l'usager pourra réserver. L'interface IReservable est donc implémentée par toutes les classes qui sont des objets qu'un usager pourrait réserver. Cela permet encore une fois de diminuer le couplage entre les classes et d'augmenter la cohérence. 
		</p>
		
		<p>
		D'un paquet à l'autre, le nombre de liens est tenu au minimum nécessaire. On tente de ne transmettre que l'information nécessaire au bon fonctionnement. Certainement, nous essayons d'atteindre un couplage informationnel
		</p>
		
		<h2>Discussion sur le fardeau</h2>
		<p>
		Plus tôt, nous avons identifié DataBase comme étant du domaine d'architecture. De fait, son fardeau est faible, ne contenant qu'un attribut DataBase, des méthodes retournant des primitifs et utilisant en paramètre des éléments implantant une interface au fardeau faible. Cela est cohérent avec le domaine souhaité. 
		</p>
		<p>
		Deux classes notables pour les fardeaux élevés sont AdminSession et ClientSession. Celles-ci travaillent sur des classes plus complexes et ont un plus grand nombre d'opérations. Elles avaient été également considérées comme étant du domaine d'application dans la discussion sur les réutilisabilité. C'est également ces deux classes qui ont, de loin, le plus de lien entre d'autres classes.
		</p>
		<p>
		Du côté voyage, TravelFacility et ses enfants ont un fardeau assez faible, mais considérant leur implication, c'est assez normal. Le noeud du voyage justement la classe Trip et ses enfants. C'est d'ailleurs une des deux seules classes du paquet à posséder des méthodes. C'est donc le plus grand fardeau, mais c'est également ce qui est le plus directement relié au domaine de l'application au sein du paquet, ce qui se voit par son lien avec l'interface IReservable, à l'extérieur du paquet. Tout le reste s'articule donc autour de cette classe. Les véhicules ont aussi un assez lourd fardeau, du fait de la complexité de leur composition. 
		</p>
		<h2>Graphe IA et justification</h2>
		
		<img src="./Design/graphia.png" alt="graphe ia"\>
		<p>
			La plupart de nos paquets se retrouvent sous l'axe principal, mais parviennent à éviter la "Zone of pain". Nos paquets les plus stables sont ceux de Storage et de Payment conséquemment avec leur degré de réutilisabilité potentiellement élevé. Le paquet le plus instable est celui des GUI qui est effectivement dépendant du reste du système pour son fonctionnement. S'il n'est pas complètement concret, c'est que nous avons décidé de généralisé les GUI pour augmenter la cohésion en diminuant la reproduction de code.
		</p>
		
		<p>
			Les paquets Transportation, Trip, Reservation, UserSessions et Utils se situent tous dans la même zone avec une abstraction allant de .23 à .33 et une instabilité de .5 à .83. Ce sont d'ailleurs les classes les plus spécifiques au domaine d'application et sont assez près de l'axe principal du graphique, donc assez équilibrés dans leur proportion Abstraction/Instabilité. Ce sont plutôt des classes concrètes, mais ce nombre est enflé par le choix spécifique pour la composition des véhicules dans le paquet Transportation. Autrement, on peut quand même noté que les paquets Reservation et Utils se situent exactement sur l'axe principal, ce qui idéal pour notre design.
		</p>
		
		<p>Les paquets qui semblent les plus problématiques sont ceux reliés à la base de données. Ce sont les paquets les plus près du "Zone of pain" et on peut le comprendre à la nature même de leur travail. Nous nous sommes beaucoup penchés sur la question, mais n'avons pas trouvé de solutions concluantes pour les éloigner de cette zone.</p>
		
		<h2>Justification de l'application des principes de conception</h2>
		
		<p>
			Pour ce qui est de voyager, on utilise le DIP pour dépendre des voyages (abstrait) plutôt que de leurs différentes implémentations. Les réservations sont effectuées sur des objets qui implémentent l'interface Reservable. On peut donc facilement étendre les fonctionnalités pour des types de voyages différents et implanter l'interface correspondante à l'objet qui pourra être réserver éventuellement sans devoir retravailler systématiquement le code.
		</p>
		
		
		<p>Nous tentons de respecter le plus possible la loi de Demeter, même si ce ne pourra réellement être apparent que dans le code. On garde un couplage aussi faible que possible entre les classes et les liens existants se font, dans la mesure du possible, au niveau informationnel pour restreindre à l'essentiel.</p>
		<p>Une des plus grandes réflexions que nous avons effectués est au sujet du LSP et, par conséquent, à la façon de procéder pour la généralisation au niveau de Trip, TransportVehicule et TravelFacility. Nous en sommes venus à la conclusion que cet héritage était correct dans le mesure que n'importe quel Trip peut effectivement substituer Trip à tout moment, mais qu'au niveau du domaine, un vol se fait avec un avion et une croisière avec un paquebot. C'est donc un problème qui ne contredit pas le LSP, car on pourra réellement effectuer la substitution, mais on ne pourra pas substituer les enfants les uns aux autres, évidemment. Puisque la dépendance est également abstraite, il n'y a de cas réels de substitution, on s'attendra toujours à un enfant de Trip.</p>
		
		<p>
		Nous nous sommes fiés au CRP pour gérer la composition des différents véhicules et, surtout, le prix attribué aux billets. Les véhicules sont composés de sections qui sont, elles, définies seront leur ratio.
		</p>

		<p>
			Pour les principes de conception de paquets, nous nous sommes assurés d'éviter toute forme de cycle entre les paquets. Pour le SDP, après avoir vérifié s'il était respecté, nous avons effectué des modifications à notre design en constatant qu'il n'était pas respecté. C'est une des raisons, en plus de la réutilisabilité, qui nous a poussé à séparer Payment de Reservation dans nos paquets. Autrement, pour la mesure instabilité/abstraction, le graphe IA présenté plus tôt représente bien l'équilibre que nous avons rechercé.
		</p>
		
	</main>

</body>
</html>
